diff --git a/libraries/aws/ota-for-aws-iot-embedded-sdk/source/ota.c b/libraries/aws/ota-for-aws-iot-embedded-sdk/source/ota.c
index 09fd019..56772d0 100644
--- a/libraries/aws/ota-for-aws-iot-embedded-sdk/source/ota.c
+++ b/libraries/aws/ota-for-aws-iot-embedded-sdk/source/ota.c
@@ -639,6 +639,8 @@ static void otaTimerCallback( OtaTimerId_t otaTimerId )

 static bool platformInSelftest( void )
 {
+    /* TODO: remove the return below when non-secure image is moved to avoid secure-fault */
+    return false;
     bool selfTest = false;

     /*
@@ -2126,6 +2128,19 @@ static void handleSelfTestJobDoc( OtaFileContext_t * pFileContext )
             LogError( ( "Failed to set image state to testing: OtaErr_t=%s", OTA_Err_strerror( otaErr ) ) );
         }
     }
+    else if (errVersionCheck == OtaErrSameFirmwareVersion)
+    {
+        /* ota demo accepts any update that passes the boot, this does not change behaviour, only skips the self
+         * test status check (reading of the field in the header for status) */
+
+        /* we expect to have the same version - change state to accepted and send status to AWS */
+        otaErr = setImageStateWithReason( OtaImageStateAccepted, 0);
+
+        if( otaErr != OtaErrNone )
+        {
+            LogError( ( "Failed to set image state to accepted: OtaErr_t=%s", OTA_Err_strerror( otaErr ) ) );
+        }
+    }
     else
     {
         LogWarn( ( "New image is being rejected: Application version of the new image is invalid: "
diff --git a/libraries/aws/ota-for-aws-iot-embedded-sdk/source/ota_mqtt.c b/libraries/aws/ota-for-aws-iot-embedded-sdk/source/ota_mqtt.c
index aafd6bf..897c4f7 100644
--- a/libraries/aws/ota-for-aws-iot-embedded-sdk/source/ota_mqtt.c
+++ b/libraries/aws/ota-for-aws-iot-embedded-sdk/source/ota_mqtt.c
@@ -65,6 +65,10 @@
 /* NOTE: The format specifiers in this string are placeholders only; the lengths of these
  * strings are used to calculate buffer sizes.
  */
+
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wunneeded-internal-declaration"
+
 static const char pOtaJobsGetNextTopicTemplate[] = MQTT_API_THINGS "%s"MQTT_API_JOBS_NEXT_GET;                 /*!< Topic template to request next job. */
 static const char pOtaJobsNotifyNextTopicTemplate[] = MQTT_API_THINGS "%s"MQTT_API_JOBS_NOTIFY_NEXT;           /*!< Topic template to notify next . */
 static const char pOtaJobStatusTopicTemplate[] = MQTT_API_THINGS "%s"MQTT_API_JOBS "%s"MQTT_API_UPDATE;        /*!< Topic template to update the current job. */
@@ -74,6 +78,8 @@ static const char pOtaGetStreamTopicTemplate[] = MQTT_API_THINGS "%s"MQTT_API_ST
 static const char pOtaGetNextJobMsgTemplate[] = "{\"clientToken\":\"%u:%s\"}";                                 /*!< Used to specify client token id to authenticate job. */
 static const char pOtaStringReceive[] = "\"receive\"";                                                         /*!< Used to build the job receive template. */

+#pragma GCC diagnostic pop
+
 /** We map all of the above status cases to one of these status strings.
  * These are the only strings that are supported by the Job Service. You
  * shall not change them to arbitrary strings or the job will not change
diff --git a/libraries/aws/ota-for-aws-iot-embedded-sdk/source/portable/os/ota_os_freertos.c b/libraries/aws/ota-for-aws-iot-embedded-sdk/source/portable/os/ota_os_freertos.c
index a8c81ea..b183213 100644
--- a/libraries/aws/ota-for-aws-iot-embedded-sdk/source/portable/os/ota_os_freertos.c
+++ b/libraries/aws/ota-for-aws-iot-embedded-sdk/source/portable/os/ota_os_freertos.c
@@ -42,6 +42,9 @@
 #define MAX_MESSAGES    20
 #define MAX_MSG_SIZE    sizeof( OtaEventMsg_t )

+/* running on in simalation causes timers to lapse unexpectedly */
+#define FVP_TIMER_FUDGE_FACTOR (1000)
+
 /* Array containing pointer to the OTA event structures used to send events to the OTA task. */
 static OtaEventMsg_t queueData[ MAX_MESSAGES ];

@@ -262,7 +265,7 @@ OtaOsStatus_t OtaStartTimer_FreeRTOS( OtaTimerId_t otaTimerId,
     else
     {
         /* Reset the timer. */
-        retVal = xTimerReset( otaTimer[ otaTimerId ], portMAX_DELAY );
+        retVal = xTimerReset( otaTimer[ otaTimerId ], FVP_TIMER_FUDGE_FACTOR * portMAX_DELAY );

         if( retVal == pdTRUE )
         {
