# Copyright (c) 2021-2023 Arm Limited and Contributors. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

default:
  # cancel the job if a new pipeline is triggered on the same branch
  interruptible: true
  image: ${OPEN_IOT_SDK_DOCKER_REGISTRY}/open-iot-sdk:${OPEN_IOT_SDK_DOCKER_VERSION}

include:
  - project: '${OPEN_IOT_SDK_BASE_GROUP}/tools/developer-tools'
    ref: b44bf6f877313c32b74d531073d46fecea85bbf5
    file:
      - '/templates/pipeline-baseline-sdk.yml'
      - '/templates/sync-public/pipeline-sync-public.yml'
      - '/templates/autobot/pipeline-autobot.yml'

variables:
  DOCKER_TAG: "$CI_COMMIT_REF_SLUG"
  # Default DOCKER_TAG, set this accordingly to trigger against
  # another Docker image version
  OPEN_IOT_SDK_DOCKER_VERSION: v1
  AVH_INSTANCE_NAME_PREFIX: "iot-os-m-avh-testing-"
  # Default AWS_AMI_VERSION, set this accordingly to trigger against
  # another AMI VERSION
  AWS_AMI_VERSION: "1.3.1"
  SYNC_DESTINATION : 'https://${GITLAB_USER_ID}:${PUBLIC_SDK_TOKEN}@git.gitlab.arm.com/iot/open-iot-sdk/examples/total-solutions.git'

stages:
  - autobot
  - quality-check
  - build
  - test
  - cleanup
  - sync-public

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_REF_NAME =~ /^release-.*/
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

black-duck:
  stage:
    quality-check
  variables:
    BD_PROJECT_NAME: "IoT-M:total-solutions"


.ami-test-base:
  stage: build
  tags:
    - iotmsw-avh-amd64
  variables:
    AWS_DEFAULT_REGION: eu-west-1
    BUILD_PATH: build
    CREDENTIALS_PATH: credentials
  script:
    - pip install arm-avhclient
    - export PATH=$HOME/.local/bin:$PATH
    # generate device credentials for ota test
    - ./ci/generate_credentials.sh -p $CREDENTIALS_PATH
    # We need to pass following environment variables to
    # EC2 instance running AVH AMI. Move the environmental variable
    # to a temporary file and this file will be referenced by avh.yml
    - |
      echo """
        export IOT_AWS_REGION='"$IOT_AWS_REGION"'
        export IOT_OTA_ROLE_NAME='"$IOT_OTA_ROLE_NAME"'
        export IOT_OTA_CERT_ID='"$IOT_OTA_CERT_ID"'
        export IOT_OTA_ENDPOINT='"$IOT_OTA_ENDPOINT"'
        export IOT_OTA_CLIENT_CERT='"$IOT_OTA_CLIENT_CERT"'
        export IOT_OTA_CLIENT_PRIV='"$IOT_OTA_CLIENT_PRIV"'
        export IOT_OTA_CLIENT_PUB='"$IOT_OTA_CLIENT_PUB"'
        export TEST='"$TEST"'
        export BUILD_PATH='"$BUILD_PATH"'
        export CREDENTIALS_PATH='"$CREDENTIALS_PATH"'
        export AVH='"$AVH"'
        export TARGET='"$TARGET"'
        export RTOS='"$RTOS"'
        export APPLICATIONS_TO_BUILD='"$APPLICATIONS_TO_BUILD"'
        export PYTEST_SELECTION='"$PYTEST_SELECTION"'
        export ENDPOINT='"$ENDPOINT"'
      """ > ci/env.sh
    - >
      ./developer-tools/utils/cloud_helper/az.sh
      --template-type iot
      --out-file "$CREDENTIALS_PATH"/iothub_credentials.h
    - >
      ./developer-tools/utils/cloud_helper/az.sh
      --template-type nx
      --out-file "$CREDENTIALS_PATH"/azure_iot_credentials.h
    - export AWS_INSTANCE_NAME="${AVH_INSTANCE_NAME_PREFIX}${CI_JOB_ID}"
    - avhclient -b aws execute --specfile ci/avh.yml
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - report*.xml
    reports:
      junit: report*.xml
  rules:
    - if: $RUN_AMI_WORKFLOW == "true"

ami-test-aws:
  extends: .ami-test-base
  parallel:
    matrix:
      - TARGET: Corstone-300
        RTOS: [FREERTOS, RTX]
        AVH: VHT_Corstone_SSE-300_Ethos-U55
        APPLICATIONS_TO_BUILD: blinky, keyword, speech
        PYTEST_SELECTION: examples/blinky/tests,examples/keyword/tests/test_ml.py,examples/keyword/tests/test_aws_ota.py,examples/speech/tests/test_ml.py,examples/speech/tests/test_aws_ota.py
        ENDPOINT: [AWS]
        INFERENCE: [ETHOS]
        TOOLCHAIN: [ARMCLANG, GNU]
        AUDIO: [VSI]
      - TARGET: Corstone-310
        RTOS: [FREERTOS, RTX]
        AVH: VHT_Corstone_SSE-310
        APPLICATIONS_TO_BUILD: blinky, keyword, speech
        PYTEST_SELECTION: examples/blinky/tests,examples/keyword/tests/test_ml.py,examples/keyword/tests/test_aws_ota.py,examples/speech/tests/test_ml.py,examples/speech/tests/test_aws_ota.py
        ENDPOINT: [AWS]
        INFERENCE: [ETHOS]
        TOOLCHAIN: [ARMCLANG, GNU]
        AUDIO: [VSI]

ami-test-mlia:
  extends: .ami-test-base
  parallel:
    matrix:
      # Though most of the argument is unused, pass it to avh.yml
      # to make the script common for other tests.
      - TARGET: Corstone-300
        RTOS: [FREERTOS]
        AVH: VHT_Corstone_SSE-300_Ethos-U55
        APPLICATIONS_TO_BUILD: mlia
        PYTEST_SELECTION: "mlia/tests/test_ats_mlia.py"
        ENDPOINT: [AWS]
        INFERENCE: [ETHOS]
        TOOLCHAIN: [ARMCLANG]
        AUDIO: [VSI]

ami-test-azure:
  extends: .ami-test-base
  parallel:
    matrix:
      - TARGET: Corstone-300
        RTOS: [RTX, THREADX]
        AVH: VHT_Corstone_SSE-300_Ethos-U55
        APPLICATIONS_TO_BUILD: blinky, keyword, speech
        PYTEST_SELECTION: "examples/blinky/tests,examples/keyword/tests/test_ml.py,examples/keyword/tests/test_azure.py ,examples/speech/tests/test_ml.py,examples/speech/tests/test_azure.py"
        ENDPOINT: [AZURE]
        INFERENCE: [ETHOS]
        TOOLCHAIN: [ARMCLANG, GNU]
        AUDIO: [VSI]
      - TARGET: Corstone-310
        RTOS: [RTX, THREADX]
        AVH: VHT_Corstone_SSE-310
        APPLICATIONS_TO_BUILD: blinky, keyword, speech
        PYTEST_SELECTION: "examples/blinky/tests,examples/keyword/tests/test_ml.py,examples/keyword/tests/test_azure.py,examples/speech/tests/test_ml.py,examples/speech/tests/test_azure.py"
        ENDPOINT: [AZURE]
        INFERENCE: [ETHOS]
        TOOLCHAIN: [ARMCLANG, GNU]
        AUDIO: [VSI]

# This base job load the right docker image and sets some default variables
.base_job:
  extends: .base-job-rules
  tags:
    - iotmsw-amd64
  variables:
    PYTHONUNBUFFERED: 1
    OUTPUT_FOLDER: build-${TARGET}-${RTOS}-${ENDPOINT}-${INFERENCE}-${TOOLCHAIN}-${AUDIO}


# The test job extends .basejob. It add rules to map targets to AVH binaries,
# require the application to be built and retrieve the artifacts.
.test_job:
  stage: test
  extends: .base_job
  needs:
    - job: build-applications
      artifacts: true
  before_script:
    - |
      if [ $TARGET == "Corstone-300" ];then
        AVH=/opt/VHT/VHT_Corstone_SSE-300_Ethos-U55
      fi
    - |
      if [ $TARGET == "Corstone-310" ];then
        AVH=/opt/VHT/VHT_Corstone_SSE-310
      fi
    - virtualenv --system-site-packages -p 3.9 venv
    - . venv/bin/activate
    - pip install -U -r requirements.ci.txt
    - pip install wheel
    - pip install pytest_asyncio
    - git clone https://git.gitlab.arm.com/iot/open-iot-sdk/tools/pyedmgr.git
    - export PYEDMGR_ROOT=$PWD/pyedmgr
    - export PYTHONPATH=$PYEDMGR_ROOT:$PYTHONPATH
    - pushd $PYEDMGR_ROOT
    - pip install -r requirements.txt
    - python setup.py install
    - popd


# Those fragments contain base variables required by pipelines for AWS and Azure.
# They can be used to set matrix parameters and extended using << : .anchor syntax
.pipeline_config_aws: &pipeline_config_aws
  TARGET: [Corstone-300, Corstone-310]
  RTOS: [FREERTOS, RTX]
  ENDPOINT: [AWS]
  INFERENCE: [ETHOS]
  TOOLCHAIN: [ARMCLANG, GNU]
  AUDIO: [VSI]

.pipeline_config_azure: &pipeline_config_azure
  TARGET: [Corstone-300, Corstone-310]
  RTOS: [THREADX, RTX]
  ENDPOINT: [AZURE]
  INFERENCE: [ETHOS]
  TOOLCHAIN: [ARMCLANG, GNU]
  AUDIO: [VSI]

.pipeline_config_azure_netxduo: &pipeline_config_azure_netxduo
  TARGET: [Corstone-300, Corstone-310]
  RTOS: [THREADX]
  ENDPOINT: [AZURE_NETXDUO]
  INFERENCE: [ETHOS]
  TOOLCHAIN: [ARMCLANG, GNU]
  AUDIO: [VSI]

.pipeline_config_software_inference: &pipeline_config_software_inference
  TARGET: [Corstone-300, Corstone-310]
  RTOS: [FREERTOS]
  ENDPOINT: [AWS]
  INFERENCE: [SOFTWARE]
  TOOLCHAIN: [ARMCLANG, GNU]
  AUDIO: [VSI]

.pipeline_config_audio_in_memory: &pipeline_config_audio_in_memory
  TARGET: [Corstone-300, Corstone-310]
  RTOS: [FREERTOS]
  ENDPOINT: [AWS]
  INFERENCE: [ETHOS]
  TOOLCHAIN: [ARMCLANG, GNU]
  AUDIO: [ROM]

# Build all the applications which later are tested. Build of the various binaries
# is described in ./ci/build_examples.sh
build-applications:
  stage: build
  extends: .base_job
  script:
    - env
    - ./ci/generate_credentials.sh -p "$OUTPUT_FOLDER"_credentials_keyword
    - ./ci/generate_credentials.sh -p "$OUTPUT_FOLDER"_credentials_speech
    - >
      ./developer-tools/utils/cloud_helper/az.sh
      --template-type iot
      --out-file "$OUTPUT_FOLDER"_credentials_keyword/iothub_credentials.h
    - >
      ./developer-tools/utils/cloud_helper/az.sh
      --template-type iot
      --out-file "$OUTPUT_FOLDER"_credentials_speech/iothub_credentials.h
    - >
      ./developer-tools/utils/cloud_helper/az.sh
      --template-type nx
      --out-file "$OUTPUT_FOLDER"_credentials_keyword/azure_iot_credentials.h
    - >
      ./developer-tools/utils/cloud_helper/az.sh
      --template-type nx
      --out-file "$OUTPUT_FOLDER"_credentials_speech/azure_iot_credentials.h
    - ./ci/build_examples.sh
  artifacts:
    paths:
      # examples without cloud connection
      - ${OUTPUT_FOLDER}/
      # keyword cloud
      - ${OUTPUT_FOLDER}_cloud_keyword/
      - ${OUTPUT_FOLDER}_credentials_keyword/
      # speech cloud
      - ${OUTPUT_FOLDER}_cloud_speech/
      - ${OUTPUT_FOLDER}_credentials_speech/
    expire_in: 1 week
  parallel:
    matrix:
      - *pipeline_config_aws
      - *pipeline_config_azure
      - *pipeline_config_azure_netxduo
      - *pipeline_config_software_inference
      - *pipeline_config_audio_in_memory

# Test the ML part of the KWS application
test-application:
  extends: .test_job
  script:
    - env
    - ./ats.sh test ${APP} ml --build-path ${OUTPUT_FOLDER} --avh ${AVH}
  parallel:
    matrix:
      # add more names to the APP array as we move tests to pyedmgr
      -
        << : *pipeline_config_aws
        APP: [blinky, keyword, speech]
      -
        << : *pipeline_config_azure
        APP: [blinky, keyword, speech]
      -
        << : *pipeline_config_azure_netxduo
        APP: [blinky, keyword, speech]
      -
        << : *pipeline_config_software_inference
        APP: [keyword]
      -
        << : *pipeline_config_audio_in_memory
        APP: [keyword, speech]

# Test connection to the AWS cloud
test-ota-aws:
  extends: .test_job
  script:
    - env
    - ./ats.sh test ${APP} aws_ota --build-path "$OUTPUT_FOLDER"_cloud_${APP} --avh $AVH --credentials-path "$OUTPUT_FOLDER"_credentials_${APP}
  parallel:
    matrix:
      -
        << : *pipeline_config_aws
        APP: [keyword, speech]

# Test connection to the azure cloud
test-ml-azure:
  extends: .test_job
  script:
    - env
    - ./ats.sh test ${APP} azure --build-path "$OUTPUT_FOLDER"_cloud_${APP} --avh $AVH
  parallel:
    matrix:
      -
        << : *pipeline_config_azure
        APP: [keyword, speech]
      -
        << : *pipeline_config_azure_netxduo
        APP: [keyword, speech]

# Test OTA with Azure NetX Duo
test-ota-azure-netxduo:
  extends: .test_job
  # Serialize Device Update runs to avoid throttling by Azure
  resource_group: azure-device-update
  script:
    - env
    - ./ats.sh test ${APP} azure_netxduo_ota --build-path "$OUTPUT_FOLDER"_cloud_${APP} --avh $AVH --credentials-path "$OUTPUT_FOLDER"_credentials_${APP}
  parallel:
    matrix:
      -
        << : *pipeline_config_azure_netxduo
        APP: [keyword, speech]

test-mlia:
  extends: .test_job
  stage: test
  tags:
    - iotmsw-amd64
  script:
    - env
    - ls /opt/VHT/
    - ./ats.sh build mlia --clean
    - pytest mlia/tests/test_ats_mlia.py


aws-cleanup:
  stage: cleanup
  tags:
    - iotmsw-amd64
  rules:
    - if: $GARBAGE_COLLECT == "true"
  script:
    - python -u ./ci/aws_cleanup.py

avh-cleanup:
  stage: cleanup
  tags:
    - iotmsw-avh-amd64

  script:
    - python ci/cleanup_avh_instances.py "${AVH_INSTANCE_NAME_PREFIX}"
  rules:
    - if: $GARBAGE_COLLECT == "true"
