diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6bb21854..e28fa139 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -26,8 +26,12 @@ else()
     include(platform/ext/target/${TFM_PLATFORM}/preload.cmake)
 endif()

-if(TFM_SYSTEM_FP)
-    message(FATAL_ERROR "Hardware FPU is currently not supported in TF-M")
+if(TFM_SYSTEM_FP OR TFM_SYSTEM_FP_NS)
+    if(TFM_SYSTEM_FPU)
+        message(STATUS "Platform ${TFM_PLATFORM} with FPU")
+    else()
+        message(FATAL_ERROR "FPU is not supported in platform: ${TFM_PLATFORM}")
+    endif()
 endif()
 if(TFM_SYSTEM_MVE)
     message(FATAL_ERROR "Hardware MVE is currently not supported in TF-M")
diff --git a/bl2/CMakeLists.txt b/bl2/CMakeLists.txt
index 18ba31b9..244e4961 100644
--- a/bl2/CMakeLists.txt
+++ b/bl2/CMakeLists.txt
@@ -34,10 +34,15 @@ target_link_libraries(bl2
         tfm_boot_status
 )

+target_compile_options(bl2
+    PRIVATE
+        ${BL2_COMPILER_FLAG}
+)
+
 target_link_options(bl2
     PRIVATE
         $<$<C_COMPILER_ID:GNU>:-Wl,-Map=${CMAKE_BINARY_DIR}/bin/bl2.map>
-        $<$<C_COMPILER_ID:ARMClang>:--map>
+        $<$<C_COMPILER_ID:ARMClang>:--map --fpu=softvfp>
         $<$<C_COMPILER_ID:IAR>:--map\;${CMAKE_BINARY_DIR}/bin/bl2.map>
 )

@@ -106,6 +111,21 @@ target_include_directories(bl2_mbedcrypto
         ${MBEDCRYPTO_PATH}/library
 )

+target_compile_options(bl2_mbedcrypto
+    PRIVATE
+        ${BL2_COMPILER_FLAG}
+)
+
+target_compile_options(bl2_mbedtls
+    PRIVATE
+        ${BL2_COMPILER_FLAG}
+)
+
+target_compile_options(bl2_mbedx509
+    PRIVATE
+        ${BL2_COMPILER_FLAG}
+)
+
 ############################### CODE SHARING ###################################

 if (TFM_CODE_SHARING)
diff --git a/bl2/ext/mcuboot/CMakeLists.txt b/bl2/ext/mcuboot/CMakeLists.txt
index 45485156..c88dca64 100644
--- a/bl2/ext/mcuboot/CMakeLists.txt
+++ b/bl2/ext/mcuboot/CMakeLists.txt
@@ -27,6 +27,16 @@ target_link_libraries(bootutil
         bl2_mbedcrypto
 )

+target_compile_options(bootutil
+    PRIVATE
+        ${BL2_COMPILER_FLAG}
+)
+
+target_compile_definitions(bootutil
+    PRIVATE
+        $<$<BOOL:${DEFAULT_MCUBOOT_FLASH_MAP}>:DEFAULT_MCUBOOT_FLASH_MAP>
+)
+
 target_include_directories(mcuboot_config
     INTERFACE
         $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}> # for mcuboot_config.h only
diff --git a/config/check_config.cmake b/config/check_config.cmake
index ff11f444..db70df0b 100644
--- a/config/check_config.cmake
+++ b/config/check_config.cmake
@@ -48,6 +48,14 @@ tfm_invalid_config(TEST_PSA_API STREQUAL "STORAGE" AND NOT TFM_PARTITION_PROTECT

 tfm_invalid_config(CRYPTO_HW_ACCELERATOR_OTP_STATE AND NOT CRYPTO_HW_ACCELERATOR)
 tfm_invalid_config(CRYPTO_HW_ACCELERATOR_OTP_STATE AND NOT (CRYPTO_HW_ACCELERATOR_OTP_STATE STREQUAL "ENABLED" OR CRYPTO_HW_ACCELERATOR_OTP_STATE STREQUAL "PROVISIONING"))
+########################## FPU ################################################
+
+tfm_invalid_config(NOT TFM_FP_ARCH STREQUAL ${TFM_FP_ARCH_DEFAULT} AND (TFM_SYSTEM_FP STREQUAL "0" AND TFM_SYSTEM_FP_NS STREQUAL "0"))
+tfm_invalid_config(TFM_SYSTEM_FP LESS 0 OR TFM_SYSTEM_FP GREATER 2)
+#tfm_invalid_config((NOT TFM_PSA_API) AND (TFM_SYSTEM_FP GREATER 0))
+tfm_invalid_config(TFM_SYSTEM_FP STREQUAL "0" AND TFM_LAZY_STACK)
+tfm_invalid_config(TFM_SYSTEM_FP_NS LESS 0 OR TFM_SYSTEM_FP_NS GREATER 2)
+tfm_invalid_config(TFM_SYSTEM_FP_NS STREQUAL "0" AND TFM_LAZY_STACK_NS AND NOT TFM_LAZY_STACK)

 ########################## BL2 #################################################

diff --git a/config/config_default.cmake b/config/config_default.cmake
index ab3543d2..d446d791 100644
--- a/config/config_default.cmake
+++ b/config/config_default.cmake
@@ -76,6 +76,8 @@ set(MCUBOOT_S_IMAGE_MIN_VER             0.0.0+0     CACHE STRING    "Minimum ver
 set(MCUBOOT_NS_IMAGE_MIN_VER            0.0.0+0     CACHE STRING    "Minimum version of non-secure image required by the secure image for upgrade to this secure image. If MCUBOOT_IMAGE_NUMBER == 1 this option has no effect")

 set(MCUBOOT_MBEDCRYPTO_CONFIG_FILEPATH  "${CMAKE_SOURCE_DIR}/bl2/ext/mcuboot/config/mcuboot-mbedtls-cfg.h" CACHE FILEPATH "Mbedtls config file to use with MCUboot")
+set(TFM_SYSTEM_FP                       0           CACHE STRING    "FP ABI type in SPE: 0-software, 1-hybird, 2-hardware")
+set(TFM_SYSTEM_FP_NS                    0           CACHE STRING    "FP ABI type in NSPE: 0-software, 1-hybird, 2-hardware")

 ############################ Platform ##########################################

diff --git a/config/fp_config_default.cmake b/config/fp_config_default.cmake
new file mode 100644
index 00000000..4c39cc6d
--- /dev/null
+++ b/config/fp_config_default.cmake
@@ -0,0 +1,30 @@
+#-------------------------------------------------------------------------------
+# Copyright (c) 2021, Arm Limited. All rights reserved.
+#
+# SPDX-License-Identifier: BSD-3-Clause
+#
+#-------------------------------------------------------------------------------
+
+################################### FP ########################################
+
+set(TFM_FP_ARCH_DEFAULT                 "fpv5-sp-d16" CACHE STRING "FP architecture")
+
+if (NOT DEFINED TFM_FP_ARCH)
+    set(TFM_FP_ARCH ${TFM_FP_ARCH_DEFAULT})
+endif()
+
+if (TFM_SYSTEM_FP STREQUAL "1" OR TFM_SYSTEM_FP STREQUAL "2")
+    set(TFM_LAZY_STACK                     ON          CACHE BOOL      "Lazy stacking")
+else()
+    set(TFM_LAZY_STACK                     OFF         CACHE BOOL      "Lazy stacking")
+endif()
+
+if (TFM_SYSTEM_FP_NS STREQUAL "1" OR TFM_SYSTEM_FP_NS STREQUAL "2")
+    set(TFM_LAZY_STACK_NS                  ON          CACHE BOOL      "Lazy stacking in Non-secure")
+else()
+    if (TFM_LAZY_STACK)
+        set(TFM_LAZY_STACK_NS              ON          CACHE BOOL      "Lazy stacking in Non-secure")
+    else()
+        set(TFM_LAZY_STACK_NS              OFF         CACHE BOOL      "Lazy stacking in Non-secure")
+    endif()
+endif()
diff --git a/config/set_config.cmake b/config/set_config.cmake
index 3ceaa03d..11d1fb92 100644
--- a/config/set_config.cmake
+++ b/config/set_config.cmake
@@ -47,5 +47,8 @@ if (TFM_PSA_API)
     include(config/tfm_ipc_config_default.cmake)
 endif()

+# FP configs
+include(config/fp_config_default.cmake)
+
 # Load defaults, setting options not already set
 include(config/config_default.cmake)
diff --git a/lib/ext/CMSIS_5/CMakeLists.txt b/lib/ext/CMSIS_5/CMakeLists.txt
index 818b09df..dfbeab14 100644
--- a/lib/ext/CMSIS_5/CMakeLists.txt
+++ b/lib/ext/CMSIS_5/CMakeLists.txt
@@ -1,24 +1,28 @@
 #-------------------------------------------------------------------------------
-# Copyright (c) 2020, Arm Limited. All rights reserved.
+# Copyright (c) 2020-2021, Arm Limited. All rights reserved.
 #
 # SPDX-License-Identifier: BSD-3-Clause
 #
 #-------------------------------------------------------------------------------

 add_library(CMSIS_5_RTX_V8MMN STATIC IMPORTED GLOBAL)
+add_library(CMSIS_5_RTX_V8MMFN STATIC IMPORTED GLOBAL)
 add_library(CMSIS_5_RTX_V8MBN STATIC IMPORTED GLOBAL)
 add_library(CMSIS_5_RTX_CM3 STATIC IMPORTED GLOBAL)

 if ("${CMAKE_C_COMPILER_ID}" STREQUAL GNU)
     set_target_properties(CMSIS_5_RTX_V8MMN PROPERTIES IMPORTED_LOCATION ${CMSIS_5_PATH}/RTOS2/RTX/Library/GCC/libRTX_V8MMN.a)
+    set_target_properties(CMSIS_5_RTX_V8MMFN PROPERTIES IMPORTED_LOCATION ${CMSIS_5_PATH}/RTOS2/RTX/Library/GCC/libRTX_V8MMFN.a)
     set_target_properties(CMSIS_5_RTX_V8MBN PROPERTIES IMPORTED_LOCATION ${CMSIS_5_PATH}/RTOS2/RTX/Library/GCC/libRTX_V8MBN.a)
     set_target_properties(CMSIS_5_RTX_CM3   PROPERTIES IMPORTED_LOCATION ${CMSIS_5_PATH}/RTOS2/RTX/Library/GCC/libRTX_CM3.a)
 elseif("${CMAKE_C_COMPILER_ID}" STREQUAL ARMClang)
     set_target_properties(CMSIS_5_RTX_V8MMN PROPERTIES IMPORTED_LOCATION ${CMSIS_5_PATH}/RTOS2/RTX/Library/ARM/RTX_V8MMN.lib)
+    set_target_properties(CMSIS_5_RTX_V8MMFN PROPERTIES IMPORTED_LOCATION ${CMSIS_5_PATH}/RTOS2/RTX/Library/ARM/RTX_V8MMFN.lib)
     set_target_properties(CMSIS_5_RTX_V8MBN PROPERTIES IMPORTED_LOCATION ${CMSIS_5_PATH}/RTOS2/RTX/Library/ARM/RTX_V8MBN.lib)
     set_target_properties(CMSIS_5_RTX_CM3   PROPERTIES IMPORTED_LOCATION ${CMSIS_5_PATH}/RTOS2/RTX/Library/ARM/RTX_CM3.lib)
 elseif("${CMAKE_C_COMPILER_ID}" STREQUAL IAR)
     set_target_properties(CMSIS_5_RTX_V8MMN PROPERTIES IMPORTED_LOCATION ${CMSIS_5_PATH}/RTOS2/RTX/Library/IAR/RTX_V8MMN.a)
+    set_target_properties(CMSIS_5_RTX_V8MMFN PROPERTIES IMPORTED_LOCATION ${CMSIS_5_PATH}/RTOS2/RTX/Library/IAR/RTX_V8MMFN.a)
     set_target_properties(CMSIS_5_RTX_V8MBN PROPERTIES IMPORTED_LOCATION ${CMSIS_5_PATH}/RTOS2/RTX/Library/IAR/RTX_V8MBN.a)
     set_target_properties(CMSIS_5_RTX_CM3   PROPERTIES IMPORTED_LOCATION ${CMSIS_5_PATH}/RTOS2/RTX/Library/IAR/RTX_CM3.a)
 else()
@@ -30,6 +34,11 @@ target_link_libraries(CMSIS_5_RTX_V8MMN
         tfm_s_veneers
 )

+target_link_libraries(CMSIS_5_RTX_V8MMFN
+    INTERFACE
+        tfm_s_veneers
+)
+
 target_link_libraries(CMSIS_5_RTX_V8MBN
     INTERFACE
         tfm_s_veneers
diff --git a/lib/ext/qcbor/CMakeLists.txt b/lib/ext/qcbor/CMakeLists.txt
index 10c891d5..dc4529fb 100644
--- a/lib/ext/qcbor/CMakeLists.txt
+++ b/lib/ext/qcbor/CMakeLists.txt
@@ -7,9 +7,11 @@

 cmake_minimum_required(VERSION 3.15)

-add_library(tfm_qcbor STATIC EXCLUDE_FROM_ALL)
+############################### qcbor s ########################################

-target_sources(tfm_qcbor
+add_library(tfm_qcbor_s STATIC EXCLUDE_FROM_ALL)
+
+target_sources(tfm_qcbor_s
     PRIVATE
         src/ieee754.c
         src/qcbor_encode.c
@@ -18,18 +20,23 @@ target_sources(tfm_qcbor
         util/qcbor_util.c
 )

-target_include_directories(tfm_qcbor
+target_include_directories(tfm_qcbor_s
     PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/inc>
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/util>
 )

-target_link_libraries(tfm_qcbor
+target_link_libraries(tfm_qcbor_s
     PRIVATE
         tfm_attestation_defs
         tfm_t_cose_defs
 )

+target_compile_options(tfm_qcbor_s
+    PRIVATE
+        ${COMPILER_FPU_FLAG}
+)
+
 ############################ qcbor test ########################################

 add_library(tfm_qcbor_test STATIC EXCLUDE_FROM_ALL)
@@ -53,5 +60,10 @@ target_include_directories(tfm_qcbor_test

 target_link_libraries(tfm_qcbor_test
     PRIVATE
-        tfm_qcbor
+        tfm_qcbor_ns
 )
+
+target_compile_options(tfm_qcbor_test
+    PRIVATE
+        ${COMPILER_FPU_NS_FLAG}
+)
\ No newline at end of file
diff --git a/lib/ext/t_cose/CMakeLists.txt b/lib/ext/t_cose/CMakeLists.txt
index cd780ad1..8b3bda98 100644
--- a/lib/ext/t_cose/CMakeLists.txt
+++ b/lib/ext/t_cose/CMakeLists.txt
@@ -54,10 +54,15 @@ target_link_libraries(tfm_t_cose_ns
     PUBLIC
         tfm_t_cose_common
         tfm_t_cose_defs
-        tfm_qcbor
+        tfm_qcbor_ns
         tfm_ns_interface
 )

+target_compile_options(tfm_t_cose_ns
+    PUBLIC
+        ${COMPILER_FPU_NS_FLAG}
+)
+
 ############################ t_cose secure #####################################

 add_library(tfm_t_cose_s STATIC EXCLUDE_FROM_ALL)
@@ -66,10 +71,15 @@ target_link_libraries(tfm_t_cose_s
     PUBLIC
         tfm_t_cose_common
         tfm_t_cose_defs
-        tfm_qcbor
+        tfm_qcbor_s
         psa_interface
 )

+target_compile_options(tfm_t_cose_s
+    PUBLIC
+        ${COMPILER_FPU_FLAG}
+)
+
 ############################ t_cose test #######################################

 add_library(tfm_t_cose_test STATIC EXCLUDE_FROM_ALL)
@@ -93,3 +103,8 @@ target_link_libraries(tfm_t_cose_test
     PRIVATE
         tfm_t_cose_ns
 )
+
+target_compile_options(tfm_t_cose_test
+    PRIVATE
+        ${COMPILER_FPU_NS_FLAG}
+)
diff --git a/platform/CMakeLists.txt b/platform/CMakeLists.txt
index cab72c0e..8ce1f757 100755
--- a/platform/CMakeLists.txt
+++ b/platform/CMakeLists.txt
@@ -66,12 +66,20 @@ target_link_libraries(platform_s
 target_compile_definitions(platform_s
     PUBLIC
         TFM_SPM_LOG_LEVEL=${TFM_SPM_LOG_LEVEL}
+        $<$<BOOL:${OTP_NV_COUNTERS_RAM_EMULATION}>:OTP_NV_COUNTERS_RAM_EMULATION>
+        TFM_SYSTEM_FP=${TFM_SYSTEM_FP}
+        $<$<BOOL:${TFM_LAZY_STACK}>:TFM_LAZY_STACK>
     PRIVATE
         $<$<BOOL:${SYMMETRIC_INITIAL_ATTESTATION}>:SYMMETRIC_INITIAL_ATTESTATION>
         $<$<OR:$<VERSION_GREATER:${TFM_ISOLATION_LEVEL},1>,$<STREQUAL:"${TEST_PSA_API}","IPC">>:CONFIG_TFM_ENABLE_MEMORY_PROTECT>
         $<$<AND:$<BOOL:${TFM_PXN_ENABLE}>,$<STREQUAL:${CMAKE_SYSTEM_ARCHITECTURE},armv8.1-m.main>>:TFM_PXN_ENABLE>
 )

+target_compile_options(platform_s
+    PUBLIC
+        ${COMPILER_FPU_FLAG}
+)
+
 #========================= Platform Non-Secure ================================#

 target_include_directories(platform_ns
@@ -97,11 +105,26 @@ target_link_libraries(platform_ns
 )

 target_compile_definitions(platform_ns
+    PUBLIC
+        TFM_SYSTEM_FP_NS=${TFM_SYSTEM_FP_NS}
+        $<$<BOOL:${TFM_LAZY_STACK_NS}>:TFM_LAZY_STACK_NS>
     PRIVATE
         $<$<BOOL:${TFM_ENABLE_SLIH_TEST}>:TFM_ENABLE_SLIH_TEST>
         $<$<BOOL:${TFM_PERIPH_ACCESS_TEST}>:TFM_ENABLE_PERIPH_ACCESS_TEST>
 )

+target_compile_options(platform_ns
+    PUBLIC
+        ${COMPILER_FPU_NS_FLAG}
+)
+
+if(NS)
+target_link_options(tfm_ns
+    PUBLIC
+        ${LINKER_FPU_NS_OPTION}
+)
+endif()
+
 #========================= Platform BL2 =======================================#
 if(BL2)
     #TODO import policy
diff --git a/platform/ext/cmsis/core_cm33.h b/platform/ext/cmsis/core_cm33.h
index 7fed59a8..47ba42d9 100644
--- a/platform/ext/cmsis/core_cm33.h
+++ b/platform/ext/cmsis/core_cm33.h
@@ -938,6 +938,19 @@ typedef struct
 #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: INTLINESNUM Position */
 #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: INTLINESNUM Mask */

+/* Coprocessor Power Control Register Definitions */
+#define SCnSCB_CPPWR_SUS11_Pos              23U                                        /*!< CPPWR: SUS11 Position */
+#define SCnSCB_CPPWR_SUS11_Msk              (1UL << SCnSCB_CPPWR_SUS11_Pos)            /*!< CPPWR: SUS11 Mask */
+
+#define SCnSCB_CPPWR_SU11_Pos               22U                                        /*!< CPPWR: SU11 Position */
+#define SCnSCB_CPPWR_SU11_Msk               (1UL << SCnSCB_CPPWR_SU11_Pos)             /*!< CPPWR: SU11 Mask */
+
+#define SCnSCB_CPPWR_SUS10_Pos              21U                                        /*!< CPPWR: SUS10 Position */
+#define SCnSCB_CPPWR_SUS10_Msk              (1UL << SCnSCB_CPPWR_SUS10_Pos)            /*!< CPPWR: SUS10 Mask */
+
+#define SCnSCB_CPPWR_SU10_Pos               20U                                        /*!< CPPWR: SU10 Position */
+#define SCnSCB_CPPWR_SU10_Msk               (1UL << SCnSCB_CPPWR_SU10_Pos)             /*!< CPPWR: SU10 Mask */
+
 /*@} end of group CMSIS_SCnotSCB */


diff --git a/platform/ext/common/uart_stdout.c b/platform/ext/common/uart_stdout.c
index 811dfe4d..925954a4 100644
--- a/platform/ext/common/uart_stdout.c
+++ b/platform/ext/common/uart_stdout.c
@@ -52,7 +52,6 @@ int stdio_output_string(const unsigned char *str, uint32_t len)
 /* Struct FILE is implemented in stdio.h. Used to redirect printf to
  * STDIO_DRIVER
  */
-FILE __stdout;
 /* __ARMCC_VERSION is only defined starting from Arm compiler version 6 */
 int fputc(int ch, FILE *f)
 {
diff --git a/platform/include/tfm_plat_test.h b/platform/include/tfm_plat_test.h
index 013081d2..a4f6525c 100644
--- a/platform/include/tfm_plat_test.h
+++ b/platform/include/tfm_plat_test.h
@@ -8,6 +8,7 @@
 #ifndef __TFM_PLAT_TEST_H__
 #define __TFM_PLAT_TEST_H__

+#include "cmsis.h"
 #include "tfm_plat_defs.h"

 /**
@@ -97,5 +98,19 @@ void tfm_plat_test_non_secure_timer_start(void);
  */
 void tfm_plat_test_non_secure_timer_stop(void);

+/**
+ * \brief Set reload value for the non-Secure timer.
+ */
+void tfm_plat_test_non_secure_timer_set_reload_value(uint32_t value);
+
+/**
+ * \brief Get reload value for the non-Secure timer.
+ */
+uint32_t tfm_plat_test_non_secure_timer_get_reload_value(void);
+
+/**
+ * \brief Set NVIC interrupt priority and enablement for the non-Secure timer.
+ */
+void tfm_plat_test_non_secure_timer_nvic_configure(void);

 #endif /* __TFM_PLAT_TEST_H__ */
diff --git a/secure_fw/CMakeLists.txt b/secure_fw/CMakeLists.txt
index bf8d21aa..9826cb62 100644
--- a/secure_fw/CMakeLists.txt
+++ b/secure_fw/CMakeLists.txt
@@ -58,12 +58,19 @@ set_target_properties(tfm_s
         RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
 )

+target_compile_options(tfm_s
+    PUBLIC
+        ${COMPILER_FPU_FLAG}
+)
+
 target_link_options(tfm_s
     PRIVATE
         --entry=Reset_Handler
         $<$<C_COMPILER_ID:GNU>:-Wl,-Map=${CMAKE_BINARY_DIR}/bin/tfm_s.map>
         $<$<C_COMPILER_ID:ARMClang>:--map>
         $<$<C_COMPILER_ID:IAR>:--map\;${CMAKE_BINARY_DIR}/bin/tfm_s.map>
+    PUBLIC
+        ${LINKER_FPU_OPTION}
 )

 add_convert_to_bin_target(tfm_s)
diff --git a/secure_fw/partitions/initial_attestation/CMakeLists.txt b/secure_fw/partitions/initial_attestation/CMakeLists.txt
index 2c6c1b35..3bec976b 100644
--- a/secure_fw/partitions/initial_attestation/CMakeLists.txt
+++ b/secure_fw/partitions/initial_attestation/CMakeLists.txt
@@ -59,7 +59,7 @@ target_link_libraries(tfm_psa_rot_partition_attestation
     PRIVATE
         tfm_secure_api
         platform_s
-        tfm_qcbor
+        tfm_qcbor_s
         tfm_t_cose_s
         secure_fw
         psa_interface
diff --git a/secure_fw/spm/CMakeLists.txt b/secure_fw/spm/CMakeLists.txt
index 098c5188..5229a459 100755
--- a/secure_fw/spm/CMakeLists.txt
+++ b/secure_fw/spm/CMakeLists.txt
@@ -105,6 +105,14 @@ target_compile_definitions(tfm_spm
         $<$<CONFIG:Debug>:TFM_CORE_DEBUG>
         $<$<AND:$<BOOL:${BL2}>,$<BOOL:${MCUBOOT_MEASURED_BOOT}>>:BOOT_DATA_AVAILABLE>
         $<$<BOOL:${TFM_EXCEPTION_INFO_DUMP}>:TFM_EXCEPTION_INFO_DUMP>
+        TFM_SYSTEM_FP=${TFM_SYSTEM_FP}
+        TFM_SYSTEM_FP_NS=${TFM_SYSTEM_FP_NS}
+        $<$<BOOL:${TEST_S_FPU}>:TEST_S_FPU>
+)
+
+target_compile_options(tfm_spm
+    PUBLIC
+        ${COMPILER_FPU_FLAG}
 )

 # With constant optimizations on tfm_nspc_func emits a symbol that the linker
diff --git a/secure_fw/spm/cmsis_func/main.c b/secure_fw/spm/cmsis_func/main.c
index c9ef0119..db9bea43 100644
--- a/secure_fw/spm/cmsis_func/main.c
+++ b/secure_fw/spm/cmsis_func/main.c
@@ -204,6 +204,11 @@ int main(void)
     /* Jumps to non-secure code */
     SPMLOG_DBGMSG("\033[1;34mJumping to non-secure code...\033[0m\r\n");
 #endif
+
+    /* enable reset from non secure code */
+    struct sse300_sysctrl_t *p = (struct sse300_sysctrl_t*)SSE300_SYSCTRL_BASE_S;
+    p->reset_mask = 0xFFFFFFFF;
+    SCB->AIRCR = 0x05FA4000;

     jump_to_ns_code();
 }
diff --git a/secure_fw/spm/cmsis_psa/arch/tfm_arch_v8m_main.c b/secure_fw/spm/cmsis_psa/arch/tfm_arch_v8m_main.c
index 33fda0c2..2047a454 100644
--- a/secure_fw/spm/cmsis_psa/arch/tfm_arch_v8m_main.c
+++ b/secure_fw/spm/cmsis_psa/arch/tfm_arch_v8m_main.c
@@ -56,20 +56,40 @@
 __attribute__((naked)) void PendSV_Handler(void)
 {
     __ASM volatile(
-        "tst     lr, #0x40                  \n" /* Was NS interrupted by S? */
-        "it      eq                         \n"
-        "bxeq    lr                         \n" /* Yes, do not schedule */
-        "mrs     r0, psp                    \n"
-        "mrs     r1, psplim                 \n"
-        "push    {r0, r1, r2, lr}           \n"
-        "push    {r4-r11}                   \n"
-        "mov     r0, sp                     \n"
-        "bl      tfm_pendsv_do_schedule     \n"
-        "pop     {r4-r11}                   \n"
-        "pop     {r0, r1, r2, lr}           \n"
-        "msr     psp, r0                    \n"
-        "msr     psplim, r1                 \n"
-        "bx      lr                         \n"
+        "   tst     lr, #0x40               \n" /* Was NS interrupted by S? */
+        "   beq     v8m_pendsv_exit         \n" /* Yes, do not schedule */
+        "   push    {r0, lr}                \n" /* Save dummy R0, LR */
+        "   bl      tfm_pendsv_do_schedule  \n"
+        "   pop     {r2, lr}                \n"
+        "   cmp     r0, r1                  \n" /* ctx of curr and next thrd */
+        "   beq     v8m_pendsv_exit         \n" /* No schedule if curr = next */
+#if (TFM_SYSTEM_FP >= 1)
+        "   tst     lr, #0x10               \n" /* Current thread uses FPU? */
+        "   bne     non_fp                  \n"
+        "   ldr     r2, =0xE000EF34         \n"
+        "   ldr     r3, [r2]                \n"
+        "   tst     r3, #0x40000000         \n" /* Lazy stacking enabled? */
+        "   beq     non_fp                  \n"
+        "   tst     r3, #0x1                \n" /* Lazy stacking active? */
+        "   beq     non_fp                  \n"
+        "   vmov    s0, s0                  \n" /* Trigger lazy stacking */
+#if (TFM_LVL != 1)
+        "   ldr     r3, =0xE000EF38         \n"
+        "   mov     r2, 0                   \n"
+        "   str     r2, [r3]                \n" /* Clear FP context address */
+#endif /* TFM_LVL != 1 */
+        "non_fp:                            \n"
+#endif /* TFM_SYSTEM_FP >= 1 */
+        "   mrs     r2, psp                 \n"
+        "   mrs     r3, psplim              \n"
+        "   stmdb   r2!, {r4-r11}           \n" /* Save callee registers */
+        "   stmia   r0, {r2, r3, r4, lr}    \n" /* Save struct context_ctrl_t */
+        "   ldmia   r1, {r2, r3, r4, lr}    \n" /* Load ctx of next thread */
+        "   ldmia   r2!, {r4-r11}           \n" /* Restore callee registers */
+        "   msr     psp, r2                 \n"
+        "   msr     psplim, r3              \n"
+        "v8m_pendsv_exit:                   \n"
+        "   bx      lr                      \n"
     );
 }

@@ -233,10 +253,19 @@ void tfm_arch_config_extensions(void)
      * latency when the FPU is not used by the SPE.
      */
 #if defined(__FPU_USED) && (__FPU_USED == 1U)
+/* For secure uses FPU only */
+#if (TFM_SYSTEM_FP >= 1)
     /* Enable Secure privileged and unprivilged access to the FP Extension */
     SCB->CPACR |= (3U << 10U*2U)     /* enable CP10 full access */
                   | (3U << 11U*2U);  /* enable CP11 full access */

+#ifdef TFM_LAZY_STACK
+    /* Enable lazy stacking */
+    FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
+#else
+    /* Disable lazy stacking */
+    FPU->FPCCR &= ~FPU_FPCCR_LSPEN_Msk;
+#endif
     /* If the SPE will ever use the floating-point registers for sensitive data,
      * then FPCCR.TS, FPCCR.CLRONRET and FPCCR.CLRONRETS must be set at
      * initialisation and not changed again afterwards.
@@ -244,18 +273,40 @@ void tfm_arch_config_extensions(void)
     FPU->FPCCR |= FPU_FPCCR_TS_Msk
                   | FPU_FPCCR_CLRONRET_Msk
                   | FPU_FPCCR_CLRONRETS_Msk;
+
+#if (TFM_SYSTEM_FP_NS == 0)
+    /* If FPU is used by secure only, prevent non-secure from modifying FPU’s
+     * power setting.
+     */
+    SCnSCB->CPPWR |= SCnSCB_CPPWR_SUS11_Msk | SCnSCB_CPPWR_SUS10_Msk;
 #endif
+#endif /* TFM_SYSTEM_FP >= 1 */

+#endif /* __FPU_USED */
+#endif /* __FPU_PRESENT */
+
+#if (TFM_SYSTEM_FP_NS >= 1)
     /* Permit Non-secure access to the Floating-point Extension.
      * Note: It is still necessary to set CPACR_NS to enable the FP Extension in
      * the NSPE. This configuration is left to NS privileged software.
      */
     SCB->NSACR |= SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk;
+#if (TFM_SYSTEM_FP == 0) && (TFM_LAZY_STACK_NS == 0)
+    /* If secure doesn't use FPU but non-secure uses FPU with lazy stacking
+     * disabled, enable FPU on secure side as well.
+     * The reason is: if non-secure FP context is active for this scenario,
+     * during secure exception entry, system checks whether FPU is enabled in
+     * secure before stacking non-secure FP context. If FPU is not enabled in
+     * secure, NOCP fault generates.
+     */
+    SCB->CPACR |= (3U << 10U*2U)     /* enable CP10 full access */
+                  | (3U << 11U*2U);  /* enable CP11 full access */
+#endif
+#endif /* TFM_SYSTEM_FP_NS >= 1 */

 #if defined(__ARM_ARCH_8_1M_MAIN__)
     SCB->CCR |= SCB_CCR_TRD_Msk;
 #endif
-#endif
 }

 __attribute__((naked, noinline)) void tfm_arch_clear_fp_status(void)
@@ -268,3 +319,45 @@ __attribute__((naked, noinline)) void tfm_arch_clear_fp_status(void)
                    "bx   lr                  \n"
                   );
 }
+
+#if (TFM_SYSTEM_FP >= 1)
+__attribute__((naked, noinline)) void tfm_arch_clear_fp_data(void)
+{
+    __ASM volatile(
+                    "eor  r0, r0, r0         \n"
+                    "vmov s0, r0             \n"
+                    "vmov s1, r0             \n"
+                    "vmov s2, r0             \n"
+                    "vmov s3, r0             \n"
+                    "vmov s4, r0             \n"
+                    "vmov s5, r0             \n"
+                    "vmov s6, r0             \n"
+                    "vmov s7, r0             \n"
+                    "vmov s8, r0             \n"
+                    "vmov s9, r0             \n"
+                    "vmov s10, r0            \n"
+                    "vmov s11, r0            \n"
+                    "vmov s12, r0            \n"
+                    "vmov s13, r0            \n"
+                    "vmov s14, r0            \n"
+                    "vmov s15, r0            \n"
+                    "vmov s16, r0            \n"
+                    "vmov s17, r0            \n"
+                    "vmov s18, r0            \n"
+                    "vmov s19, r0            \n"
+                    "vmov s20, r0            \n"
+                    "vmov s21, r0            \n"
+                    "vmov s22, r0            \n"
+                    "vmov s23, r0            \n"
+                    "vmov s24, r0            \n"
+                    "vmov s25, r0            \n"
+                    "vmov s26, r0            \n"
+                    "vmov s27, r0            \n"
+                    "vmov s28, r0            \n"
+                    "vmov s29, r0            \n"
+                    "vmov s30, r0            \n"
+                    "vmov s31, r0            \n"
+                    "bx   lr                 \n"
+                  );
+}
+#endif
diff --git a/secure_fw/spm/cmsis_psa/main.c b/secure_fw/spm/cmsis_psa/main.c
index 7d34578f..a7cc618b 100644
--- a/secure_fw/spm/cmsis_psa/main.c
+++ b/secure_fw/spm/cmsis_psa/main.c
@@ -16,6 +16,12 @@
 #include "tfm_spm_hal.h"
 #include "tfm_spm_log.h"
 #include "tfm_version.h"
+#if (TFM_SYSTEM_FP >= 1)
+#ifdef TEST_S_FPU
+#include "tfm_plat_test.h"
+#include "device_definition.h"
+#endif
+#endif

 /*
  * Avoids the semihosting issue
@@ -102,6 +108,24 @@ static fih_int tfm_core_init(void)

     SPMLOG_DBGMSGVAL("TF-M isolation level is: ", TFM_LVL);

+#if (TFM_SYSTEM_FP == 0)
+    SPMLOG_INFMSG("\033[1;33mTF-M FPU mode: Software\033[0m\r\n");
+#elif (TFM_SYSTEM_FP == 1)
+    SPMLOG_INFMSG("\033[1;33mTF-M FPU mode: Hybird\033[0m\r\n");
+#elif (TFM_SYSTEM_FP == 2)
+    SPMLOG_INFMSG("\033[1;33mTF-M FPU mode: Hardware\033[0m\r\n");
+#endif
+
+#if (TFM_SYSTEM_FP >= 1)
+#ifdef TFM_LAZY_STACK
+    SPMLOG_INFMSG("\033[1;33mLazy stacking(S) enabled\033[0m\r\n");
+#elif defined TFM_LAZY_STACK_NS
+    SPMLOG_INFMSG("\033[1;33mLazy stacking(NS) enabled\033[0m\r\n");
+#else
+    SPMLOG_INFMSG("\033[1;33mLazy stacking disabled\033[0m\r\n");
+#endif
+#endif
+
     tfm_core_validate_boot_data();

     configure_ns_code();
@@ -120,6 +144,16 @@ static fih_int tfm_core_init(void)
         FIH_RET(fih_int_encode(TFM_ERROR_GENERIC));
     }

+#if (TFM_SYSTEM_FP >= 1)
+#ifdef TEST_S_FPU
+    /* Configure non-secure timer */
+    tfm_plat_test_non_secure_timer_nvic_configure();
+    if (!timer_cmsdk_is_initialized(&CMSDK_TIMER1_DEV_NS)) {
+        timer_cmsdk_init(&CMSDK_TIMER1_DEV_NS);
+    }
+#endif
+#endif
+
     FIH_RET(fih_int_encode(TFM_SUCCESS));
 }

@@ -150,6 +184,12 @@ int main(void)
      */
     tfm_arch_set_secure_exception_priorities();

+#if (TFM_SYSTEM_FP >= 1)
+    tfm_arch_clear_fp_data();
+#endif
+
+    tfm_arch_clear_fp_status();
+
     /* Move to handler mode for further SPM initialization. */
     tfm_core_handler_mode();
 }
diff --git a/secure_fw/spm/cmsis_psa/tfm_core_svcalls_ipc.c b/secure_fw/spm/cmsis_psa/tfm_core_svcalls_ipc.c
index 7ca5cfc1..b0a498d5 100644
--- a/secure_fw/spm/cmsis_psa/tfm_core_svcalls_ipc.c
+++ b/secure_fw/spm/cmsis_psa/tfm_core_svcalls_ipc.c
@@ -279,7 +279,6 @@ uint32_t tfm_core_svc_handler(uint32_t *msp, uint32_t exc_return,

     switch (svc_number) {
     case TFM_SVC_SPM_INIT:
-        tfm_arch_clear_fp_status();
         exc_return = tfm_spm_init();
         break;
     case TFM_SVC_GET_BOOT_DATA:
diff --git a/secure_fw/spm/ffm/spm_log.c b/secure_fw/spm/ffm/spm_log.c
index b15f87d7..2da31bdb 100644
--- a/secure_fw/spm/ffm/spm_log.c
+++ b/secure_fw/spm/ffm/spm_log.c
@@ -1,13 +1,28 @@
 /*
- * Copyright (c) 2020, Arm Limited. All rights reserved.
+ * Copyright (c) 2020-2021, Arm Limited. All rights reserved.
  *
  * SPDX-License-Identifier: BSD-3-Clause
  *
  */

 #include "tfm_spm_log.h"
+#if (TFM_SYSTEM_FP >= 1)
+#include <stdbool.h>
+#include "tfm_core_utils.h"
+#endif

 #define MAX_DIGIT_BITS 12  /* 8 char for number, 2 for '0x' and 2 for '\r\n' */
+#if (TFM_SYSTEM_FP >= 1)
+/* 1 for '+/-', 1 for '.' and 2 for '\r\n', remainings are for number */
+#define MAX_DIGIT_BITS_F      (24)
+#define MAX_DECIMAL_BITS      (6) /* Upto 6 decimal points */
+#define MAX_DECIMAL_NUM       (1000000U)
+#define MAX_FLOAT_NUM         (1e9)
+
+#define ERROR_NAN             ("nan\r\n")
+#define ERROR_NOT_SUPPORTED   ("not support\r\n")
+#endif
+
 const static char HEX_TABLE[] = {'0', '1', '2', '3', '4', '5', '6', '7',
                                  '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

@@ -54,3 +69,112 @@ int32_t spm_log_msgval(const char *msg, size_t len, uint32_t value)
     }
     return (result_msg + result_val);
 }
+
+#if (TFM_SYSTEM_FP >= 1)
+void ftoa(double num, char* num_buff)
+{
+    int count = 0, k = 0;
+    int i = 0, j = 0, temp = 0;
+    bool f_neg = false;
+
+    /* NAN detection */
+    if (num != num) {
+        spm_memcpy(num_buff, ERROR_NAN, 5);
+        return;
+    }
+
+    /* Maximum float number supported is 1e9, otherwise overflow 32 bits */
+    if ((num > MAX_FLOAT_NUM) || (num < -MAX_FLOAT_NUM)) {
+        spm_memcpy(num_buff, ERROR_NOT_SUPPORTED, 13);
+        return;
+    }
+
+    /* Check negative number */
+    if (num < 0) {
+        f_neg = true;
+        num = 0 - num;
+    }
+
+    /* Break down */
+    int ipart = (int)num;
+    float part = (num - ipart) * MAX_DECIMAL_NUM;
+    int fpart = (int)part;
+    float rpart = part - fpart;
+    /* Round check */
+    if (rpart > 0.5) {
+        fpart += 1;
+    }
+
+    num_buff[count++] = '\n';
+    num_buff[count++] = '\r';
+
+    k = MAX_DECIMAL_BITS;
+    /* Fraction part */
+    while (count < MAX_DIGIT_BITS_F) {
+        --k;
+        num_buff[count++] = '0' + (fpart % 10);
+        if (!(fpart /= 10U)) {
+            break;
+        }
+    }
+
+    /* Adding extra 0s for decimal part starting with zero, e.g.0.000XXX */
+    while ((count < MAX_DIGIT_BITS_F) && (k-- > 0)) {
+        num_buff[count++] = '0';
+    }
+
+    /* Radix point */
+    if (count < MAX_DIGIT_BITS_F) {
+        num_buff[count++] = '.';
+    }
+
+    /* Integer part */
+    while (count < MAX_DIGIT_BITS_F) {
+        num_buff[count++] = '0' + (ipart % 10);
+        if (!(ipart /= 10)) {
+            break;
+        }
+    }
+
+    /* Add sign for negative number */
+    if (count < MAX_DIGIT_BITS_F) {
+        if (f_neg) {
+            num_buff[count++] = '-';
+        }
+    }
+
+    /* Reverse */
+    j = count;
+    i = 0;
+    while (i < j) {
+        temp = num_buff[i];
+        num_buff[i] = num_buff[j];
+        num_buff[j] = temp;
+        i++;
+        j--;
+    }
+}
+
+int32_t spm_log_msgvalf(const char *msg, size_t len, double value)
+{
+    int32_t result_msg = 0, result_val;
+    char value_str[MAX_DIGIT_BITS_F];
+
+    if (msg && len) {
+        result_msg = tfm_hal_output_spm_log(msg, len);
+        if (result_msg < TFM_HAL_SUCCESS) {
+            return result_msg;
+        }
+    }
+
+    spm_memset(value_str, 0, MAX_DIGIT_BITS_F);
+    ftoa(value, value_str);
+    result_val = tfm_hal_output_spm_log(value_str,
+                                        MAX_DIGIT_BITS_F);
+    if (result_val < TFM_HAL_SUCCESS) {
+        return result_val;
+    }
+
+    return (result_msg + result_val);
+}
+#endif /* TFM_SYSTEM_FP >= 1 */
diff --git a/secure_fw/spm/include/tfm_arch.h b/secure_fw/spm/include/tfm_arch.h
index 8a96d9fb..a2afee39 100644
--- a/secure_fw/spm/include/tfm_arch.h
+++ b/secure_fw/spm/include/tfm_arch.h
@@ -82,6 +82,22 @@ __STATIC_INLINE void __set_CONTROL_SPSEL(uint32_t SPSEL)
     __ISB();
 }

+/* Set secure exceptions priority. */
+void tfm_arch_set_secure_exception_priorities(void);
+
+/* Configure various extensions. */
+void tfm_arch_config_extensions(void);
+
+/* Clear float point status. */
+void tfm_arch_clear_fp_status(void);
+
+#if (TFM_SYSTEM_FP >= 1)
+/*
+ * Clear float point data.
+ */
+void tfm_arch_clear_fp_data(void);
+#endif
+
 /*
  * Initialize CPU architecture specific thread context extension
  */
diff --git a/secure_fw/spm/include/tfm_spm_log.h b/secure_fw/spm/include/tfm_spm_log.h
index 4ad749ea..68086870 100644
--- a/secure_fw/spm/include/tfm_spm_log.h
+++ b/secure_fw/spm/include/tfm_spm_log.h
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2020, Arm Limited. All rights reserved.
+ * Copyright (c) 2020-2021, Arm Limited. All rights reserved.
  *
  * SPDX-License-Identifier: BSD-3-Clause
  *
@@ -36,25 +36,37 @@

 #if (TFM_SPM_LOG_LEVEL == TFM_SPM_LOG_LEVEL_DEBUG)
 #define SPMLOG_DBGMSGVAL(msg, val) spm_log_msgval(msg, sizeof(msg), val)
+#if (TFM_SYSTEM_FP >= 1)
+#define SPMLOG_DBGMSGVALF(msg, val) spm_log_msgvalf(msg, sizeof(msg), val)
+#endif
 #define SPMLOG_DBGMSG(msg) tfm_hal_output_spm_log(msg, sizeof(msg))
 #else
 #define SPMLOG_DBGMSGVAL(msg, val)
+#define SPMLOG_DBGMSGVALF(msg, val)
 #define SPMLOG_DBGMSG(msg)
 #endif

 #if (TFM_SPM_LOG_LEVEL >= TFM_SPM_LOG_LEVEL_INFO)
 #define SPMLOG_INFMSGVAL(msg, val) spm_log_msgval(msg, sizeof(msg), val)
+#if (TFM_SYSTEM_FP >= 1)
+#define SPMLOG_INFMSGVALF(msg, val) spm_log_msgvalf(msg, sizeof(msg), val)
+#endif
 #define SPMLOG_INFMSG(msg) tfm_hal_output_spm_log(msg, sizeof(msg))
 #else
 #define SPMLOG_INFMSGVAL(msg, val)
+#define SPMLOG_DBGMSGVALF(msg, val)
 #define SPMLOG_INFMSG(msg)
 #endif

 #if (TFM_SPM_LOG_LEVEL >= TFM_SPM_LOG_LEVEL_ERROR)
 #define SPMLOG_ERRMSGVAL(msg, val) spm_log_msgval(msg, sizeof(msg), val)
+#if (TFM_SYSTEM_FP >= 1)
+#define SPMLOG_ERRMSGVALF(msg, val) spm_log_msgvalf(msg, sizeof(msg), val)
+#endif
 #define SPMLOG_ERRMSG(msg) tfm_hal_output_spm_log(msg, sizeof(msg))
 #else
 #define SPMLOG_ERRMSGVAL(msg, val)
+#define SPMLOG_DBGMSGVALF(msg, val)
 #define SPMLOG_ERRMSG(msg)
 #endif

@@ -71,4 +83,19 @@
  */
 int32_t spm_log_msgval(const char *msg, size_t len, uint32_t value);

+#if (TFM_SYSTEM_FP >= 1)
+/**
+ * \brief SPM output API to print floating point number and call the HAL API
+ *        tfm_hal_output_spm_log.
+ *
+ * \param[in]  msg    A string message
+ * \param[in]  len    The length of the message
+ * \param[in]  value  A floating point value need to be output
+ *
+ * \retval >=0        Number of chars output.
+ * \retval <0         TFM HAL error code.
+ */
+int32_t spm_log_msgvalf(const char *msg, size_t len, double value);
+#endif
+
 #endif /* __TFM_SPM_LOG_H__ */
diff --git a/toolchain_ARMCLANG.cmake b/toolchain_ARMCLANG.cmake
index 68e320a4..dd7e6a68 100644
--- a/toolchain_ARMCLANG.cmake
+++ b/toolchain_ARMCLANG.cmake
@@ -40,16 +40,33 @@ macro(tfm_toolchain_reset_compiler_flags)
         $<$<COMPILE_LANGUAGE:C>:-fdata-sections>
         $<$<COMPILE_LANGUAGE:C>:-ffunction-sections>
         $<$<COMPILE_LANGUAGE:C>:-fno-builtin>
-        $<$<COMPILE_LANGUAGE:C>:-fshort-enums>
-        $<$<COMPILE_LANGUAGE:C>:-fshort-wchar>
         $<$<COMPILE_LANGUAGE:C>:-funsigned-char>
         $<$<COMPILE_LANGUAGE:C>:-masm=auto>
         $<$<COMPILE_LANGUAGE:C>:-nostdlib>
         $<$<COMPILE_LANGUAGE:C>:-std=c99>
-        $<$<AND:$<COMPILE_LANGUAGE:C>,$<NOT:$<BOOL:${TFM_SYSTEM_FP}>>>:-mfpu=none>
-        $<$<AND:$<COMPILE_LANGUAGE:ASM>,$<NOT:$<BOOL:${TFM_SYSTEM_FP}>>>:--fpu=none>
         $<$<COMPILE_LANGUAGE:ASM>:--cpu=${CMAKE_ASM_CPU_FLAG}>
     )
+
+    set(BL2_COMPILER_FLAG $<IF:$<COMPILE_LANGUAGE:C>,-mfloat-abi=soft,$<IF:$<COMPILE_LANGUAGE:ASM>,--fpu=none,--fpu=none>>)
+
+    set(TFM_FP_ARCH_CLANG fpv5-sp)
+
+    if (TFM_SYSTEM_FP STREQUAL "2")
+        set(COMPILER_FPU_FLAG $<IF:$<COMPILE_LANGUAGE:C>,-mfloat-abi=hard,$<IF:$<COMPILE_LANGUAGE:ASM>,--apcs=/hardfp,--apcs=/hardfp>> $<IF:$<COMPILE_LANGUAGE:C>,-mfpu=${TFM_FP_ARCH},$<IF:$<COMPILE_LANGUAGE:ASM>,--fpu=${TFM_FP_ARCH_CLANG},--fpu=${TFM_FP_ARCH_CLANG}>>)
+    elseif (TFM_SYSTEM_FP STREQUAL "1")
+        set(COMPILER_FPU_FLAG $<IF:$<COMPILE_LANGUAGE:C>,-mfloat-abi=softfp,$<IF:$<COMPILE_LANGUAGE:ASM>,--apcs=/softfp,--apcs=/softfp>> $<IF:$<COMPILE_LANGUAGE:C>,-mfpu=${TFM_FP_ARCH},$<IF:$<COMPILE_LANGUAGE:ASM>,--fpu=${TFM_FP_ARCH_CLANG},--fpu=${TFM_FP_ARCH_CLANG}>>)
+    else()
+        set(COMPILER_FPU_FLAG $<IF:$<COMPILE_LANGUAGE:C>,-mfloat-abi=soft,$<IF:$<COMPILE_LANGUAGE:ASM>,--fpu=none,--fpu=none>>)
+    endif()
+
+    if (TFM_SYSTEM_FP_NS STREQUAL "2")
+        set(COMPILER_FPU_NS_FLAG $<IF:$<COMPILE_LANGUAGE:C>,-mfloat-abi=hard,$<IF:$<COMPILE_LANGUAGE:ASM>,--apcs=/hardfp,--apcs=/hardfp>> $<IF:$<COMPILE_LANGUAGE:C>,-mfpu=${TFM_FP_ARCH},$<IF:$<COMPILE_LANGUAGE:ASM>,--fpu=${TFM_FP_ARCH_CLANG},--fpu=${TFM_FP_ARCH_CLANG}>>)
+    elseif (TFM_SYSTEM_FP_NS STREQUAL "1")
+        set(COMPILER_FPU_NS_FLAG $<IF:$<COMPILE_LANGUAGE:C>,-mfloat-abi=softfp,$<IF:$<COMPILE_LANGUAGE:ASM>,--apcs=/softfp,--apcs=/softfp>> $<IF:$<COMPILE_LANGUAGE:C>,-mfpu=${TFM_FP_ARCH},$<IF:$<COMPILE_LANGUAGE:ASM>,--fpu=${TFM_FP_ARCH_CLANG},--fpu=${TFM_FP_ARCH_CLANG}>>)
+    else()
+        set(COMPILER_FPU_NS_FLAG $<IF:$<COMPILE_LANGUAGE:C>,-mfloat-abi=soft,$<IF:$<COMPILE_LANGUAGE:ASM>,--fpu=none,--fpu=none>>)
+    endif()
+
 endmacro()

 macro(tfm_toolchain_reset_linker_flags)
@@ -72,8 +89,24 @@ macro(tfm_toolchain_reset_linker_flags)
         --diag_suppress=6304
         # Pattern only matches removed unused sections.
         --diag_suppress=6329
-        $<$<NOT:$<BOOL:${TFM_SYSTEM_FP}>>:--fpu=softvfp>
     )
+
+    if (TFM_SYSTEM_FP STREQUAL "2")
+        set(LINKER_FPU_OPTION --fpu=${TFM_FP_ARCH_CLANG})
+    elseif (TFM_SYSTEM_FP STREQUAL "1")
+        set(LINKER_FPU_OPTION --fpu=${TFM_FP_ARCH_CLANG})
+    else()
+        set(LINKER_FPU_OPTION --fpu=softvfp)
+    endif()
+
+    if (TFM_SYSTEM_FP_NS STREQUAL "2")
+        set(LINKER_FPU_NS_OPTION --fpu=${TFM_FP_ARCH_CLANG})
+    elseif (TFM_SYSTEM_FP_NS STREQUAL "1")
+        set(LINKER_FPU_NS_OPTION --fpu=${TFM_FP_ARCH_CLANG})
+    else()
+        set(LINKER_FPU_NS_OPTION --fpu=softvfp)
+    endif()
+
 endmacro()

 macro(tfm_toolchain_set_processor_arch)
@@ -91,7 +124,7 @@ macro(tfm_toolchain_set_processor_arch)

     if (DEFINED TFM_SYSTEM_FP)
         if(NOT TFM_SYSTEM_FP)
-            string(APPEND CMAKE_SYSTEM_PROCESSOR "+nofp")
+            string(APPEND CMAKE_SYSTEM_PROCESSOR ".no_fp")
         endif()
     endif()

diff --git a/toolchain_GNUARM.cmake b/toolchain_GNUARM.cmake
index e100ab69..bffe3a0a 100644
--- a/toolchain_GNUARM.cmake
+++ b/toolchain_GNUARM.cmake
@@ -1,5 +1,5 @@
 #-------------------------------------------------------------------------------
-# Copyright (c) 2020, Arm Limited. All rights reserved.
+# Copyright (c) 2020-2021, Arm Limited. All rights reserved.
 #
 # SPDX-License-Identifier: BSD-3-Clause
 #
@@ -49,8 +49,26 @@ macro(tfm_toolchain_reset_compiler_flags)
         -nostdlib
         -std=c99
         $<$<BOOL:${TFM_CODE_COVERAGE}>:-g>
-        $<$<NOT:$<BOOL:${TFM_SYSTEM_FP}>>:-msoft-float>
     )
+
+    set(BL2_COMPILER_FLAG -mfloat-abi=soft)
+
+    if (TFM_SYSTEM_FP STREQUAL "2")
+        set(COMPILER_FPU_FLAG -mfloat-abi=hard -mfpu=${TFM_FP_ARCH})
+    elseif (TFM_SYSTEM_FP STREQUAL "1")
+        set(COMPILER_FPU_FLAG -mfloat-abi=softfp -mfpu=${TFM_FP_ARCH})
+    else()
+        set(COMPILER_FPU_FLAG -mfloat-abi=soft)
+    endif()
+
+    if (TFM_SYSTEM_FP_NS STREQUAL "2")
+        set(COMPILER_FPU_NS_FLAG -mfloat-abi=hard -mfpu=${TFM_FP_ARCH})
+    elseif (TFM_SYSTEM_FP_NS STREQUAL "1")
+        set(COMPILER_FPU_NS_FLAG -mfloat-abi=softfp -mfpu=${TFM_FP_ARCH})
+    else()
+        set(COMPILER_FPU_NS_FLAG -mfloat-abi=soft)
+    endif()
+
 endmacro()

 macro(tfm_toolchain_reset_linker_flags)
@@ -65,6 +83,23 @@ macro(tfm_toolchain_reset_linker_flags)
         LINKER:--no-wchar-size-warning
         LINKER:--print-memory-usage
     )
+
+    if (TFM_SYSTEM_FP STREQUAL "2")
+        set(LINKER_FPU_OPTION -mfloat-abi=hard -mfpu=${TFM_FP_ARCH})
+    elseif (TFM_SYSTEM_FP STREQUAL "1")
+        set(LINKER_FPU_OPTION -mfloat-abi=softfp -mfpu=${TFM_FP_ARCH})
+    else()
+        set(LINKER_FPU_OPTION -mfloat-abi=soft)
+    endif()
+
+    if (TFM_SYSTEM_FP_NS STREQUAL "2")
+        set(LINKER_FPU_NS_OPTION -mfloat-abi=hard -mfpu=${TFM_FP_ARCH})
+    elseif (TFM_SYSTEM_FP_NS STREQUAL "1")
+        set(LINKER_FPU_NS_OPTION -mfloat-abi=softfp -mfpu=${TFM_FP_ARCH})
+    else()
+        set(LINKER_FPU_NS_OPTION -mfloat-abi=soft)
+    endif()
+
 endmacro()

 macro(tfm_toolchain_set_processor_arch)
