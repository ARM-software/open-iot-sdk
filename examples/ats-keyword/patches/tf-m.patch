diff --git a/config/check_config.cmake b/config/check_config.cmake
index 40ed86ac..1c8b5277 100644
--- a/config/check_config.cmake
+++ b/config/check_config.cmake
@@ -54,9 +54,9 @@ tfm_invalid_config(TEST_PSA_API STREQUAL "STORAGE" AND NOT TFM_PARTITION_PROTECT
 ########################## FPU ################################################

 tfm_invalid_config(NOT (CONFIG_TFM_FP STREQUAL "soft" OR CONFIG_TFM_FP STREQUAL "hard"))
-tfm_invalid_config(NOT CMAKE_C_COMPILER_ID STREQUAL "GNU" AND CONFIG_TFM_FP STREQUAL "hard")
+# tfm_invalid_config(NOT CMAKE_C_COMPILER_ID STREQUAL "GNU" AND CONFIG_TFM_FP STREQUAL "hard")
 tfm_invalid_config((NOT CONFIG_TFM_FP_ARCH) AND CONFIG_TFM_FP STREQUAL "hard")
-tfm_invalid_config((NOT TFM_PSA_API) AND CONFIG_TFM_FP STREQUAL "hard")
+# tfm_invalid_config((NOT TFM_PSA_API) AND CONFIG_TFM_FP STREQUAL "hard")
 tfm_invalid_config(CONFIG_TFM_FP STREQUAL "soft" AND CONFIG_TFM_LAZY_STACKING)

 ########################## BL2 #################################################
diff --git a/config/cp_check.cmake b/config/cp_check.cmake
index 8e4989aa..335f556b 100644
--- a/config/cp_check.cmake
+++ b/config/cp_check.cmake
@@ -10,19 +10,19 @@
 # Check compiler with mitigation for the VLLDM instruction security vulnerability or not.
 # For more information, please check https://developer.arm.com/support/arm-security-updates/vlldm-instruction-security-vulnerability.
 if (CONFIG_TFM_FP STREQUAL "hard")
-    # Create test C file.
-    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/cvetest.c "int x;")
-    # Compile with mitigation -mfix-cmse-cve-2021-35465.
-    execute_process (
-        COMMAND ${CMAKE_C_COMPILER} -mfix-cmse-cve-2021-35465 -S ${CMAKE_CURRENT_BINARY_DIR}/cvetest.c -o ${CMAKE_CURRENT_BINARY_DIR}/cvetest.s
-        RESULT_VARIABLE ret
-        ERROR_VARIABLE err
-    )
-    file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/cvetest.c)
-    # Check result
-    if(NOT ret EQUAL 0)
-        message(FATAL_ERROR "To enable FPU usage in SPE and NSPE both, please use the compiler with '-mfix-cmse-cve-2021-35465' support")
-    else()
-        file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/cvetest.s)
-    endif()
+    # # Create test C file.
+    # file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/cvetest.c "int x;")
+    # # Compile with mitigation -mfix-cmse-cve-2021-35465.
+    # execute_process (
+    #     COMMAND ${CMAKE_C_COMPILER} -mfix-cmse-cve-2021-35465 -S ${CMAKE_CURRENT_BINARY_DIR}/cvetest.c -o ${CMAKE_CURRENT_BINARY_DIR}/cvetest.s
+    #     RESULT_VARIABLE ret
+    #     ERROR_VARIABLE err
+    # )
+    # file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/cvetest.c)
+    # # Check result
+    # if(NOT ret EQUAL 0)
+    #     message(FATAL_ERROR "To enable FPU usage in SPE and NSPE both, please use the compiler with '-mfix-cmse-cve-2021-35465' support")
+    # else()
+    #     file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/cvetest.s)
+    # endif()
 endif()
diff --git a/toolchain_ARMCLANG.cmake b/toolchain_ARMCLANG.cmake
index b6e3e3a2..63b27065 100644
--- a/toolchain_ARMCLANG.cmake
+++ b/toolchain_ARMCLANG.cmake
@@ -219,6 +219,28 @@ macro(tfm_toolchain_reload_compiler)
     endif()

     set(CMAKE_C_FLAGS_MINSIZEREL "-Oz -DNDEBUG")
+
+    set(BL2_COMPILER_CP_FLAG $<$<COMPILE_LANGUAGE:C>:-mfloat-abi=soft> $<$<COMPILE_LANGUAGE:ASM>:--fpu=none>)
+
+    set(CONFIG_TFM_FP_ARCH_ARMASM fpv5-sp)
+
+    if (CONFIG_TFM_FP STREQUAL "hard")
+        set(COMPILER_CP_FLAG $<$<COMPILE_LANGUAGE:C>:-mfloat-abi=hard -mfpu=${CONFIG_TFM_FP_ARCH}> $<$<COMPILE_LANGUAGE:ASM>:--apcs=/hardfp --fpu=${CONFIG_TFM_FP_ARCH_ARMASM}>)
+        set(LINKER_CP_OPTION --fpu=${CONFIG_TFM_FP_ARCH_ARMASM})
+
+        set(COMPILER_CP_FLAG_NSPE $<$<COMPILE_LANGUAGE:C>:-mfloat-abi=soft> $<$<COMPILE_LANGUAGE:ASM>:--fpu=none>)
+        set(LINKER_CP_OPTION_NSPE --fpu=softvfp)
+    elseif (CONFIG_TFM_SPE_FP STREQUAL "soft")
+        set(COMPILER_CP_FLAG $<$<COMPILE_LANGUAGE:C>:-mfloat-abi=softfp -mfpu=${CONFIG_TFM_FP_ARCH}> $<$<COMPILE_LANGUAGE:ASM>:--apcs=/hardfp --fpu=${CONFIG_TFM_FP_ARCH_ARMASM}>)
+        set(LINKER_CP_OPTION --fpu=${CONFIG_TFM_FP_ARCH_ARMASM})
+
+        set(COMPILER_CP_FLAG_NSPE $<$<COMPILE_LANGUAGE:C>:-mfloat-abi=soft> $<$<COMPILE_LANGUAGE:ASM>:--fpu=none>)
+        set(LINKER_CP_OPTION_NSPE --fpu=softvfp)
+    else()
+        set(COMPILER_CP_FLAG $<$<COMPILE_LANGUAGE:C>:-mfloat-abi=soft> $<$<COMPILE_LANGUAGE:ASM>:--fpu=none>)
+        set(LINKER_CP_OPTION --fpu=softvfp)
+    endif()
+
 endmacro()

 # Configure environment for the compiler setup run by cmake at the first
